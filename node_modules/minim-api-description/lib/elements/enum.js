'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = function (namespace) {
  var ArrayElement = namespace.getElementClass('array');

  /**
   * @class Enum
   *
   * @param {Element} content
   * @param meta
   * @param attributes
   *
   * @extends Element
   */

  var Enum = function (_namespace$Element) {
    _inherits(Enum, _namespace$Element);

    function Enum(content, meta, attributes) {
      _classCallCheck(this, Enum);

      var _this = _possibleConstructorReturn(this, (Enum.__proto__ || Object.getPrototypeOf(Enum)).call(this, namespace.toElement(content), meta, attributes));

      _this.element = 'enum';
      return _this;
    }

    /**
     * @name enumerations
     * @type ArrayElement
     * @memberof Enum.prototype
     */


    _createClass(Enum, [{
      key: 'enumerations',
      get: function get() {
        return this.attributes.get('enumerations');
      },
      set: function set(values) {
        var enumerations = void 0;

        if (values instanceof ArrayElement) {
          enumerations = values;
        } else if (Array.isArray(values)) {
          enumerations = new ArrayElement(values);
        } else {
          enumerations = new ArrayElement();
        }

        this.attributes.set('enumerations', enumerations);
      }
    }]);

    return Enum;
  }(namespace.Element);

  namespace.register('enum', Enum);
};

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
//# sourceMappingURL=enum.map