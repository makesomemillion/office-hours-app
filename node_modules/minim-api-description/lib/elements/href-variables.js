'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (namespace) {
  var ObjectElement = namespace.getElementClass('object');

  /**
   * @class HrefVariables
   *
   * @param {Array} content
   * @param meta
   * @param attributes
   *
   * @extends ObjectElement
   */

  var HrefVariables = function (_ObjectElement) {
    _inherits(HrefVariables, _ObjectElement);

    function HrefVariables() {
      var _ref;

      _classCallCheck(this, HrefVariables);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var _this = _possibleConstructorReturn(this, (_ref = HrefVariables.__proto__ || Object.getPrototypeOf(HrefVariables)).call.apply(_ref, [this].concat(args)));

      _this.element = 'hrefVariables';
      return _this;
    }

    return HrefVariables;
  }(ObjectElement);

  namespace.register('hrefVariables', HrefVariables);
};

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
//# sourceMappingURL=href-variables.map