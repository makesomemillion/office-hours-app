'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = function (namespace) {
  var ArrayElement = namespace.getElementClass('array');

  /**
   * @class HttpMessagePayload
   *
   * @param {Array} content
   * @param meta
   * @param attributes
   *
   * @extends ArrayElement
   */

  var HttpMessagePayload = function (_ArrayElement) {
    _inherits(HttpMessagePayload, _ArrayElement);

    function HttpMessagePayload() {
      _classCallCheck(this, HttpMessagePayload);

      return _possibleConstructorReturn(this, (HttpMessagePayload.__proto__ || Object.getPrototypeOf(HttpMessagePayload)).apply(this, arguments));
    }

    _createClass(HttpMessagePayload, [{
      key: 'header',
      value: function header(name) {
        var headers = this.attributes.get('headers');
        var header = null;

        if (headers) {
          header = headers.include(name).map(function (item) {
            return item.value;
          });
        }

        return header;
      }

      /**
       * @name contentType
       * @type StringElement
       * @memberof HttpMessagePayload.prototype
       */

    }, {
      key: 'headers',

      /**
       * @name headers
       * @type HttpHeaders
       * @memberof HttpMessagePayload.prototype
       */
      get: function get() {
        return this.attributes.get('headers');
      },
      set: function set(value) {
        this.attributes.set('headers', value);
      }
    }, {
      key: 'contentType',
      get: function get() {
        var header = this.header('Content-Type');

        if (header) {
          return header[0];
        }

        return this.content && this.content.contentType;
      }

      /**
       * @name dataStructure
       * @type Asset
       * @memberof HttpMessagePayload.prototype
       */

    }, {
      key: 'dataStructure',
      get: function get() {
        return this.findByElement('dataStructure').first;
      }

      /**
       * @name messageBody
       * @type Asset
       * @memberof HttpMessagePayload.prototype
       */

    }, {
      key: 'messageBody',
      get: function get() {
        // Returns the *first* message body. Only one should be defined according
        // to the spec, but it's possible to include more.
        return this.filter(function (item) {
          return item.element === 'asset' && item.classes.contains('messageBody');
        }).first;
      }

      /**
       * @name messageBodySchema
       * @type Asset
       * @memberof HttpMessagePayload.prototype
       */

    }, {
      key: 'messageBodySchema',
      get: function get() {
        // Returns the *first* message body schema. Only one should be defined
        // according to the spec, but it's possible to include more.
        return this.filter(function (item) {
          return item.element === 'asset' && item.classes.contains('messageBodySchema');
        }).first;
      }
    }]);

    return HttpMessagePayload;
  }(ArrayElement);

  (0, _httpRequest2.default)(namespace, HttpMessagePayload);
  (0, _httpResponse2.default)(namespace, HttpMessagePayload);
};

var _httpRequest = require('./http-request');

var _httpRequest2 = _interopRequireDefault(_httpRequest);

var _httpResponse = require('./http-response');

var _httpResponse2 = _interopRequireDefault(_httpResponse);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
//# sourceMappingURL=http-message-payload.map