'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = function (namespace) {
  var ArrayElement = namespace.getElementClass('array');

  /**
   * @class Category
   *
   * @param {Array} content
   * @param meta
   * @param attributes
   *
   * @extends ArrayElement
   */

  var Category = function (_ArrayElement) {
    _inherits(Category, _ArrayElement);

    function Category() {
      var _ref;

      _classCallCheck(this, Category);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var _this = _possibleConstructorReturn(this, (_ref = Category.__proto__ || Object.getPrototypeOf(Category)).call.apply(_ref, [this].concat(args)));

      _this.element = 'category';
      return _this;
    }

    /**
     * @name resourceGroups
     * @type ArraySlice
     * @memberof Category.prototype
     */


    _createClass(Category, [{
      key: 'metadata',
      value: function metadata(value) {
        var metadata = this.attributes.get('metadata');

        if (!metadata) {
          return undefined;
        }

        var result = metadata.children.filter(function (item) {
          return item.key.toValue() === value;
        });

        if (result.isEmpty) {
          return undefined;
        }

        return result.first.value;
      }
    }, {
      key: 'resourceGroups',
      get: function get() {
        return this.children.filter(function (item) {
          return item.classes.contains('resourceGroup');
        });
      }

      /**
       * @name dataStructures
       * @type ArraySlice
       * @memberof Category.prototype
       */

    }, {
      key: 'dataStructures',
      get: function get() {
        return this.children.filter(function (item) {
          return item.classes.contains('dataStructures');
        });
      }
    }, {
      key: 'scenarios',
      get: function get() {
        return this.children.filter(function (item) {
          return item.classes.contains('scenario');
        });
      }
    }, {
      key: 'transitionGroups',
      get: function get() {
        return this.children.filter(function (item) {
          return item.classes.contains('transitions');
        });
      }

      /**
       * @name authSchemes
       * @type ArraySlice
       * @memberof Category.prototype
       */

    }, {
      key: 'authSchemeGroups',
      get: function get() {
        return this.children.filter(function (item) {
          return item.classes.contains('authSchemes');
        });
      }

      /**
       * @name resources
       * @type ArraySlice
       * @memberof Category.prototype
       */

    }, {
      key: 'resources',
      get: function get() {
        return this.children.filter(function (item) {
          return item.element === 'resource';
        });
      }

      /**
       * @name transitions
       * @type ArraySlice
       * @memberof Category.prototype
       */

    }, {
      key: 'transitions',
      get: function get() {
        return this.children.filter(function (item) {
          return item.element === 'transition';
        });
      }

      /**
       * @name authSchemes
       * @type ArraySlice
       * @memberof Category.prototype
       */

    }, {
      key: 'authSchemes',
      get: function get() {
        var schemes = ['Basic Authentication Scheme', 'Token Authentication Scheme', 'OAuth2 Scheme'];
        return this.children.filter(function (item) {
          return schemes.indexOf(item.element) !== -1;
        });
      }
    }]);

    return Category;
  }(ArrayElement);

  namespace.register('category', Category);
};

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
//# sourceMappingURL=category.map