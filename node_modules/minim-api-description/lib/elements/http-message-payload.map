{"version":3,"sources":["http-message-payload.js"],"names":["namespace","ArrayElement","getElementClass","HttpMessagePayload","name","headers","attributes","get","header","include","map","item","value","set","content","contentType","findByElement","first","filter","element","classes","contains"],"mappings":";;;;;;;;kBAGe,UAAUA,SAAV,EAAqB;AAClC,MAAMC,eAAeD,UAAUE,eAAV,CAA0B,OAA1B,CAArB;;AAEA;;;;;;;;;;AAHkC,MAY5BC,kBAZ4B;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,6BA0BzBC,IA1ByB,EA0BnB;AACX,YAAMC,UAAU,KAAKC,UAAL,CAAgBC,GAAhB,CAAoB,SAApB,CAAhB;AACA,YAAIC,SAAS,IAAb;;AAEA,YAAIH,OAAJ,EAAa;AACXG,mBAASH,QAAQI,OAAR,CAAgBL,IAAhB,EAAsBM,GAAtB,CAA0B;AAAA,mBAAQC,KAAKC,KAAb;AAAA,WAA1B,CAAT;AACD;;AAED,eAAOJ,MAAP;AACD;;AAED;;;;;;AArCgC;AAAA;;AAahC;;;;;AAbgC,0BAkBlB;AACZ,eAAO,KAAKF,UAAL,CAAgBC,GAAhB,CAAoB,SAApB,CAAP;AACD,OApB+B;AAAA,wBAsBpBK,KAtBoB,EAsBb;AACjB,aAAKN,UAAL,CAAgBO,GAAhB,CAAoB,SAApB,EAA+BD,KAA/B;AACD;AAxB+B;AAAA;AAAA,0BA0Cd;AAChB,YAAMJ,SAAS,KAAKA,MAAL,CAAY,cAAZ,CAAf;;AAEA,YAAIA,MAAJ,EAAY;AACV,iBAAOA,OAAO,CAAP,CAAP;AACD;;AAED,eAAO,KAAKM,OAAL,IAAgB,KAAKA,OAAL,CAAaC,WAApC;AACD;;AAED;;;;;;AApDgC;AAAA;AAAA,0BAyDZ;AAClB,eAAO,KAAKC,aAAL,CAAmB,eAAnB,EAAoCC,KAA3C;AACD;;AAED;;;;;;AA7DgC;AAAA;AAAA,0BAkEd;AAChB;AACA;AACA,eAAO,KAAKC,MAAL,CAAY;AAAA,iBAAQP,KAAKQ,OAAL,KAAiB,OAAjB,IAA4BR,KAAKS,OAAL,CAAaC,QAAb,CAAsB,aAAtB,CAApC;AAAA,SAAZ,EAAsFJ,KAA7F;AACD;;AAED;;;;;;AAxEgC;AAAA;AAAA,0BA6ER;AACtB;AACA;AACA,eAAO,KAAKC,MAAL,CAAY;AAAA,iBAAQP,KAAKQ,OAAL,KAAiB,OAAjB,IAA4BR,KAAKS,OAAL,CAAaC,QAAb,CAAsB,mBAAtB,CAApC;AAAA,SAAZ,EAA4FJ,KAAnG;AACD;AAjF+B;;AAAA;AAAA,IAYDhB,YAZC;;AAoFlC,6BAAYD,SAAZ,EAAuBG,kBAAvB;AACA,8BAAaH,SAAb,EAAwBG,kBAAxB;AACD,C;;AAzFD;;;;AACA","file":"http-message-payload.js","sourcesContent":["import httpRequest from './http-request';\nimport httpResponse from './http-response';\n\nexport default function (namespace) {\n  const ArrayElement = namespace.getElementClass('array');\n\n  /**\n   * @class HttpMessagePayload\n   *\n   * @param {Array} content\n   * @param meta\n   * @param attributes\n   *\n   * @extends ArrayElement\n   */\n  class HttpMessagePayload extends ArrayElement {\n    /**\n     * @name headers\n     * @type HttpHeaders\n     * @memberof HttpMessagePayload.prototype\n     */\n    get headers() {\n      return this.attributes.get('headers');\n    }\n\n    set headers(value) {\n      this.attributes.set('headers', value);\n    }\n\n    header(name) {\n      const headers = this.attributes.get('headers');\n      let header = null;\n\n      if (headers) {\n        header = headers.include(name).map(item => item.value);\n      }\n\n      return header;\n    }\n\n    /**\n     * @name contentType\n     * @type StringElement\n     * @memberof HttpMessagePayload.prototype\n     */\n    get contentType() {\n      const header = this.header('Content-Type');\n\n      if (header) {\n        return header[0];\n      }\n\n      return this.content && this.content.contentType;\n    }\n\n    /**\n     * @name dataStructure\n     * @type Asset\n     * @memberof HttpMessagePayload.prototype\n     */\n    get dataStructure() {\n      return this.findByElement('dataStructure').first;\n    }\n\n    /**\n     * @name messageBody\n     * @type Asset\n     * @memberof HttpMessagePayload.prototype\n     */\n    get messageBody() {\n      // Returns the *first* message body. Only one should be defined according\n      // to the spec, but it's possible to include more.\n      return this.filter(item => item.element === 'asset' && item.classes.contains('messageBody')).first;\n    }\n\n    /**\n     * @name messageBodySchema\n     * @type Asset\n     * @memberof HttpMessagePayload.prototype\n     */\n    get messageBodySchema() {\n      // Returns the *first* message body schema. Only one should be defined\n      // according to the spec, but it's possible to include more.\n      return this.filter(item => item.element === 'asset' && item.classes.contains('messageBodySchema')).first;\n    }\n  }\n\n  httpRequest(namespace, HttpMessagePayload);\n  httpResponse(namespace, HttpMessagePayload);\n}\n"]}