'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.namespace = namespace;

var _minimApiDescription = require('minim-api-description');

var _minimApiDescription2 = _interopRequireDefault(_minimApiDescription);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Parse result-specific refract elements.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * General structure:
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
arseResult
nnotation
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

function namespace(options) {
  var minim = options.base;
  var Element = minim.Element;

  var StringElement = minim.getElementClass('string');
  var ArrayElement = minim.getElementClass('array');

  /**
   * @class ParseResult
   *
   * @param {Array} content
   * @param meta
   * @param attributes
   *
   * @extends ArrayElement
   */

  var ParseResult = function (_ArrayElement) {
    _inherits(ParseResult, _ArrayElement);

    function ParseResult() {
      var _ref;

      _classCallCheck(this, ParseResult);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var _this = _possibleConstructorReturn(this, (_ref = ParseResult.__proto__ || Object.getPrototypeOf(ParseResult)).call.apply(_ref, [this].concat(args)));

      _this.element = 'parseResult';
      return _this;
    }

    /**
     * @name api
     * @type Category
     * @memberof ParseResult.prototype
     */


    _createClass(ParseResult, [{
      key: 'api',
      get: function get() {
        return this.children.filter(function (item) {
          return item.classes.contains('api');
        }).first;
      }

      /**
       * @name annotations
       * @type ArraySlice
       * @memberof ParseResult.prototype
       */

    }, {
      key: 'annotations',
      get: function get() {
        return this.children.filter(function (item) {
          return item.element === 'annotation';
        });
      }

      /**
       * @name warnings
       * @type ArraySlice
       * @memberof ParseResult.prototype
       */

    }, {
      key: 'warnings',
      get: function get() {
        return this.children.filter(function (item) {
          return item.element === 'annotation' && item.classes.contains('warning');
        });
      }

      /**
       * @name errors
       * @type ArraySlice
       * @memberof ParseResult.prototype
       */

    }, {
      key: 'errors',
      get: function get() {
        return this.children.filter(function (item) {
          return item.element === 'annotation' && item.classes.contains('error');
        });
      }
    }]);

    return ParseResult;
  }(ArrayElement);

  /**
   * @class Annotation
   *
   * @param {string} content
   * @param meta
   * @param attributes
   *
   * @extends StringElement
   */


  var Annotation = function (_StringElement) {
    _inherits(Annotation, _StringElement);

    function Annotation() {
      var _ref2;

      _classCallCheck(this, Annotation);

      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      var _this2 = _possibleConstructorReturn(this, (_ref2 = Annotation.__proto__ || Object.getPrototypeOf(Annotation)).call.apply(_ref2, [this].concat(args)));

      _this2.element = 'annotation';
      return _this2;
    }

    _createClass(Annotation, [{
      key: 'code',
      get: function get() {
        return this.attributes.get('code');
      },
      set: function set(value) {
        this.attributes.set('code', value);
      }
    }]);

    return Annotation;
  }(StringElement);

  /**
   * @class SourceMap
   *
   * @param {Array} content
   * @param meta
   * @param attributes
   *
   * @extends ArrayElement
   */


  var SourceMap = function (_minim$elements$Array) {
    _inherits(SourceMap, _minim$elements$Array);

    function SourceMap() {
      var _ref3;

      _classCallCheck(this, SourceMap);

      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      var _this3 = _possibleConstructorReturn(this, (_ref3 = SourceMap.__proto__ || Object.getPrototypeOf(SourceMap)).call.apply(_ref3, [this].concat(args)));

      _this3.element = 'sourceMap';
      return _this3;
    }

    // Override toValue because until Refract 1.0
    // sourceMap is special element that contains array of array
    // TODO Remove in next minor release


    _createClass(SourceMap, [{
      key: 'toValue',
      value: function toValue() {
        return this.content.map(function (value) {
          return value.map(function (element) {
            return element.toValue();
          });
        });
      }
    }]);

    return SourceMap;
  }(minim.elements.Array);

  /**
   * @name sourceMapValue
   * @type Array
   * @memberof Element.prototype
   */


  if (!(Object.getOwnPropertyNames(Element.prototype).indexOf('sourceMapValue') !== -1)) {
    Object.defineProperty(Element.prototype, 'sourceMapValue', {
      get: function get() {
        var sourceMap = this.attributes.get('sourceMap');

        if (sourceMap) {
          return sourceMap.first.toValue();
        }

        return undefined;
      }
    });
  }

  minim.use(_minimApiDescription2.default).register('parseResult', ParseResult).register('annotation', Annotation).register('sourceMap', SourceMap);
}

exports.default = { namespace: namespace };
//# sourceMappingURL=parse-result.map